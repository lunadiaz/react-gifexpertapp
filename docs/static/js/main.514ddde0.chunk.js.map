{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","gifexpert.js","index.js"],"names":["AddCategory","onAdd","useState","inputValue","setInputValue","console","log","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","imagenes","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","img","useFetchGifs","GifExpertApp","categories","setCategories","posicion","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACAC,mBAAS,mBADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAuBpC,OADAC,QAAQC,IAAI,2BAER,cADI,CACJ,QAAMC,SAZS,SAACC,GAEjBA,EAAEC,iBACDJ,QAAQC,IAAI,+BACRH,EAAWO,OAAOC,OAAO,IACzBN,QAAQC,IAAI,qCACZL,EAAME,GACNC,EAAc,MAKlB,cACI,uBACAQ,KAAK,OACLC,MAAOV,EACPW,SA1BkB,SAACN,GACvBH,QAAQC,IAAI,+BACZF,EAAgBI,EAAEO,OAAOF,c,uBCUlBG,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAGYI,MAAMF,GAHlB,cAGNG,EAHM,gBAISA,EAAUC,OAJnB,uBAILC,EAJK,EAILA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAa,IAAD,EAC9B,MAAM,CACFC,GAAID,EAASC,GACbC,MAAOF,EAASE,MAChBV,IAAG,UAAEQ,EAASG,cAAX,aAAE,EAAiBC,iBAAiBZ,QATnC,kBAaLM,GAbK,4CAAH,sDCCAO,EAAc,SAAC,GAAgB,IAAfL,EAAc,EAAdA,SACzB,OACI,sBAAKM,UAAU,yCAAf,UACI,qBAAKC,IAAKP,EAASR,IAAKgB,IAAKR,EAASE,QACtC,4BAAIF,EAASE,YCCZO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAdAC,qBAAW,WACTxB,EAAQC,GACPwB,MAAK,SAAAC,GAEJH,EAAS,CACTf,KAAMkB,EACNL,SAAQ,SAMT,CAACpB,IAEGqB,EDhBwBK,CAAa1B,GAArCoB,EAD8B,EAC9BA,QAAcP,EADgB,EACrBN,KA+BV,OA9BNnB,QAAQC,IAAI+B,GA+BJ,qCACC,oBAAIJ,UAAW,oCAAf,SAAoDhB,IADrD,IAGG,qBAAKgB,UAAU,YAAf,SAIOH,EAAOJ,KAAI,SAAAC,GAAQ,OACjB,cAAC,EAAD,CAEAA,SAAYA,GADPA,EAASC,aE7CvBgB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAC3C,SAF8B,mBACzB2C,EADyB,KACbC,EADa,KAqBhC,OADAzC,QAAQC,IAAI,wBAEV,qCACE,8CACA,cAAC,EAAD,CAAaL,MAdD,SAACgB,GACbZ,QAAQC,IAAI,mCACZwC,EAAc,CAAC7B,GAAF,mBAAc4B,QAa3B,uBAHF,IAKE,+BACG,IACkB,IACwH,IAEzIA,EAAWnB,KAAI,SAACT,EAAU8B,GACxB,OAAO,cAAC,EAAD,CAGN9B,SAAUA,GAFN8B,aChCjBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.514ddde0.chunk.js","sourcesContent":["\r\nimport React, {useState} from 'react'\r\nimport propTypes from 'prop-types'\r\nexport const AddCategory = ({onAdd}) => { //permite al onAdd entrar en la función\r\n    const [inputValue, setInputValue] = useState(\"Escribe aquí\")//escribe aquí es el inputValue\r\n    const handleInputChange = (e)=> {\r\n        console.log(\"soy add y han pulsado letra\");\r\n        setInputValue ( e.target.value ); //el valor en el que se convertirá ahora el inputValue gracias al set es este\r\n    }\r\n    /* const handleSubmit = (e)=>{\r\n        e.preventDefault(); //esto es para prevenir que se recargue\r\n        onAdd(inputValue);\r\n\r\n    } */\r\n\r\n    const handleSubmit=(e)=>{ \r\n        /* onAdd(inputValue); */\r\n       e.preventDefault()\r\n        console.log(\"soy add y han pulsado intro\")\r\n        if (inputValue.trim().length>0){ //o sea si tiene más de 2 letras q añada, sino no\r\n            console.log(\"soy add y notifico para añadir\")\r\n            onAdd(inputValue); //aquí estás asignando el valor q tiene ahora el inputValue al onAdd\r\n            setInputValue('') //esto para que después de este de como nuevo valor nada.\r\n        } // esto debería estar así pero como no funcionaba lo he quitado\r\n    }\r\n    console.log(\"Soy Add y me repinto...\")\r\n    return( //si el input es la barra esa pero esto sirve para q aparezca abajo...?? o sea q es lo q hace realmente q aparezca abajo.\r\n        <form onSubmit= {handleSubmit}> {/* cuando pulses vas a poner el handlesubmit tipo texto y tal como dice abajo */}\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue} //esto es para que se ponga lo de escribe aquí ahí. \r\n            onChange={ handleInputChange}\r\n            /> \r\n            {/* <button onClick={handleSubmit}> Agregar</button> */}\r\n        </form>\r\n    )\r\n    //el input es el texto q metemos dentro del AddCategory (q es la barra esa, estyá dentro de ella pq toda esta función est´ña dentro de ella)\r\n}\r\nAddCategory.propTypes={ //esto e spara q todo el mundo lo haga\r\n    onAdd: propTypes.func.isRequired\r\n}","const getGifs = async (category) => { //esto nos va a servir para coger la info de las imágenes y acabar poniéndolas en el return\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UCjMjH4hDurwFrscWI4Hiq23epYRk07R`//el encode este es para que no te dé problema los espacios y tal\r\n    //recuerda que has escrito tú el https y q has cogido esto de Postman!\r\n    const respuesta = await fetch(url); //fetch pq es url, es una petición a un servidor web\r\n    const {data} = await respuesta.json(); //de todo lo q devolveria q devuelva solo el data\r\n    const gifs = data.map(imagenes => {\r\n        return{\r\n            id: imagenes.id,\r\n            title: imagenes.title, \r\n            url: imagenes.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    return gifs//el images no es nada pq al principio no aparecerá nada y luego setImages le metes el gifs\r\n    //console.log(gifs); \r\n    \r\n  }\r\nexport default getGifs","import React from 'react';\r\nexport const GifGridItem = ({imagenes}) => {\r\n    return (\r\n        <div className='card animate__animated animate__bounce'> \r\n            <img src={imagenes.url} alt={imagenes.title}/> \r\n            <p>{imagenes.title}</p>\r\n        </div>\r\n    )\r\n}\r\n// alt es para poner un textyo cuando no acrgue la imagen y eso\r\n//lo de animate_animated es una de las q hemos copiado de esa web y lo ponemos al lado de className cause why not\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n import { GifGridItem } from './GifGridItem' \r\n/* import getGifs from './helpers/getGifs' */\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n  const {loading, data:images} = useFetchGifs(category); //del useFetchGif solo va a devolver el loading\r\n  console.log(loading);\r\n/*  const [count, setcount] = useState(0)  */\r\n /*  const [images,setImages]=useState([])  */\r\n    /* useEffect(()=>{\r\n        console.log(\"Soy useEffect\")\r\n        getGifs(category) //está ejecutando todo el getGifs con mi categoria y lo coloca en la imagen?????\r\n        .then(images=>setImages(images)); //está en relación con que ya no ponga setimages en el async q ahora no está abajo sino en getGifs pero no entiendo qué está haciendo\r\n        \r\n    }, [category])\r\n     console.log(\"soy grid y me repinto con \" + category) */\r\n\r\n/*   const getGifs = async () => { //esto nos va a servir para coger la info de las imágenes y acabar poniéndolas en el return\r\n      const url = 'https://api.giphy.com/v1/gifs/trending?q=+category&limit=10&api_key=UCjMjH4hDurwFrscWI4Hiq23epYRk07R' //el encode este es para que no te dé problema los espacios y tal\r\n      //recuerda que has escrito tú el https y q has cogido esto de Postman!\r\n      const respuesta = await fetch(url);\r\n      const {data} = await respuesta.json(); \r\n      const gifs = data.map(imagenes => {\r\n          return{\r\n              id: imagenes.id,\r\n              title: imagenes.title, \r\n              url: imagenes.images?.downsized_medium.url\r\n\r\n          }\r\n      })\r\n      return gifs;\r\n      //setImages(gifs)//el images no es nada pq al principio no aparecerá nada y luego setImages le metes el gifs\r\n      //console.log(gifs); //: ahí arriba ha utilizado desestructuración para sacar de data lo q es la data en sí. no sé si acabo de entenderlo\r\n    }  */\r\n     \r\n   \r\n        return(\r\n          <> \r\n           <h3 className= 'animate__animated animate__fadeIn'>{category}</h3>\r\n           {/* {loading?'cargando...':'fin de la carga'}  */} {/* si está cargando (?) pones eso, sino (:) lo otro  */}\r\n             <div className='card-grid'>\r\n        {/* <h3>{count}</h3>  */}\r\n               \r\n                     {\r\n                    images.map(imagenes=>(\r\n                      <GifGridItem \r\n                      key={imagenes.id}\r\n                      imagenes = {imagenes}/> //esto te está mandando imagenes entero, ponemos {imagenes} para saber de dónde lo saca el grid\r\n                    ))\r\n                    }  \r\n                {/* <button onClick={()=>setcount(count+1)}> </button>  */} \r\n                         {/* <button onClick={()=>onDelete()}>Borrar</button> */}\r\n            </div>   \r\n             </>\r\n        )\r\n}\r\n","//el use es para saber q es un hook (es un tipo de función) pq hay un acuerdo de comenzar llamándoles a todos hook\r\nimport { useState, useEffect } from 'react';\r\nimport getGifs from '../components/helpers/getGifs';\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect( () => { //así solo se dispara cuando cmabia la categoría\r\n    getGifs(category)\r\n    .then(img=>{\r\n    \r\n      setState({\r\n      data: img, //DUDA: no entiendo muy bien eso de meter el img aquí\r\n      loading:false\r\n        });\r\n     \r\n      \r\n    })\r\n\r\n  }, [category])\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\"\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([ //categories es un objeto y setcategories es una función para modificar el objeto\r\n    \"Cake\",\r\n    /* \"Samurai X\",\r\n    \"Dragon Ball\", */\r\n  ]); //usamos usestate para poder modificarlo luego\r\n  //const categories =\r\n /*  const handleAdd = () => {\r\n    setCategories([...categories, \"Pokemon\", \"Queso\"]); si metes queso saldrá junto con opokemon de una\r\n  }; */\r\n  const handleAdd=(category)=>{\r\n      console.log('Soy gif añadiendo a lista...')\r\n      setCategories([category,...categories ]);  //paréntesis pq como decía, setcategories es una fucnión\r\n  }; ///por tanto el handleadd es q tuy le metes una category y el te la junta con las q tenías\r\n  //A la barra de añadir le dice q tire de handleAdd de la q tirará el siguiente documento dándole valor a category de setInputvalue\r\n  //El map trabaja como una función normal pero actúa con todos a la vez en lugar de de una en una\r\n  /* const onDelete=(idx)=>{\r\n    categories.splice(idx,1)\r\n    setCategories([...categories])\r\n  } */\r\n  console.log(\"soy gif y me repinto\")\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2> \r\n      <AddCategory onAdd={handleAdd}/> \r\n      <hr /> {/* esto es lo que dibuja la línea debajo */}\r\n      \r\n      <ol>\r\n        {\" \"}\r\n        {/* order list */}{\" \"}\r\n        {/*   <li> One </li> esto es para hacer lista y podrías hacer esto uno en uno y te saldría 1. one 2. etc con el nombre q tu les pongas */}{\" \"}\r\n        {\r\n          categories.map((category, posicion) => { //el map lo q hace es meterle la función q recibe a todos los elementos de una\r\n            return <GifGrid\r\n            key={posicion}\r\n             /* onDelete={()=>onDelete(posicion)} */\r\n             category={category} //aquí tenemos un título con un onAdd q le mete eso, la raya y luego meteremos una category y key, pèrp t,n el resto de esto q esta en gifGrid\r\n            />\r\n\r\n           /*  return <li key={posicion}>{category} </li>;  *///con el li aparece todo como x párrafos, así se pondrá por párrafos el category actualizado con lo último q hallamos puesto\r\n          }) //es q el key tiene q tener siempre un valor propio, le ha puesto posicion por poner el nombre q sea pq lo q recibe de segundo término es como la posición en la q está\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './gifexpert';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}